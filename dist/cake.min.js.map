{"version":3,"file":"cake.min.js","sources":["../src/helpers/null/is_null.js","../src/helpers/regexp/const.js","../src/helpers/regexp/regexp.js","../src/helpers/null/nvl.js","../src/split/words.js","../src/effects/capitalize.js","../src/effects/lower.js","../src/split/chars.js","../src/effects/swap.js","../src/helpers/string/to_string.js","../src/helpers/array/unique.js","../src/functions.js","../src/effects/camel.js","../src/count/count.js","../src/count/count_chars.js","../src/count/count_substrings.js","../src/count/count_words.js","../src/effects/dashedname.js","../src/effects/decapitalize.js","../src/effects/kebab.js","../src/effects/reverse.js","../src/effects/shuffle.js","../src/effects/snake.js","../src/effects/title.js","../src/effects/upper.js","../src/effects/wrap.js","../src/type.js","../src/index.js"],"sourcesContent":["export const isNull = function(val){\r\n    return val === undefined || val === null;\r\n}","/**\r\n * A regular expression string matching digits\r\n */\r\nexport const digit = '\\\\d';\r\n\r\n/**\r\n * A regular expression string matching whitespace\r\n */\r\nexport const whitespace = '\\\\s\\\\uFEFF\\\\xA0';\r\n\r\n/**\r\n * A regular expression string matching high surrogate\r\n */\r\nexport const highSurrogate = '\\\\uD800-\\\\uDBFF';\r\n\r\n/**\r\n * A regular expression string matching low surrogate\r\n */\r\nexport const lowSurrogate = '\\\\uDC00-\\\\uDFFF';\r\n\r\n/**\r\n * A regular expression string matching diacritical mark\r\n */\r\nexport const diacriticalMark = '\\\\u0300-\\\\u036F\\\\u1AB0-\\\\u1AFF\\\\u1DC0-\\\\u1DFF\\\\u20D0-\\\\u20FF\\\\uFE20-\\\\uFE2F';\r\n\r\n/**\r\n * A regular expression to match the base character for a combining mark\r\n */\r\nexport const base = '\\\\0-\\\\u02FF\\\\u0370-\\\\u1AAF\\\\u1B00-\\\\u1DBF\\\\u1E00-\\\\u20CF\\\\u2100-\\\\uD7FF\\\\uE000-\\\\uFE1F\\\\uFE30-\\\\uFFFF';\r\n\r\n/**\r\n * A regular expression to match the General Punctuation Unicode block\r\n */\r\nexport const generalPunctuationBlock = '\\\\u2000-\\\\u206F';\r\n\r\n/**\r\n * A regular expression to match non characters from from Basic Latin and Latin-1 Supplement Unicode blocks\r\n */\r\nexport const nonCharacter = '\\\\x00-\\\\x2F\\\\x3A-\\\\x40\\\\x5B-\\\\x60\\\\x7b-\\\\xBF\\\\xD7\\\\xF7';\r\n\r\n/**\r\n * A regular expression to match the dingbat Unicode block\r\n */\r\nexport const dingbatBlock = '\\\\u2700-\\\\u27BF';\r\n\r\n/**\r\n * A regular expression string that matches lower case letters: LATIN\r\n */\r\nexport const lowerCaseLetter = 'a-z\\\\xB5\\\\xDF-\\\\xF6\\\\xF8-\\\\xFF\\\\u0101\\\\u0103\\\\u0105\\\\u0107\\\\u0109\\\\u010B\\\\u010D\\\\u010F\\\\u0111\\\\u0113\\\\u0115\\\\u0117\\\\u0119\\\\u011B\\\\u011D\\\\u011F\\\\u0121\\\\u0123\\\\u0125\\\\u0127\\\\u0129\\\\u012B\\\\u012D\\\\u012F\\\\u0131\\\\u0133\\\\u0135\\\\u0137\\\\u0138\\\\u013A\\\\u013C\\\\u013E\\\\u0140\\\\u0142\\\\u0144\\\\u0146\\\\u0148\\\\u0149\\\\u014B\\\\u014D\\\\u014F\\\\u0151\\\\u0153\\\\u0155\\\\u0157\\\\u0159\\\\u015B\\\\u015D\\\\u015F\\\\u0161\\\\u0163\\\\u0165\\\\u0167\\\\u0169\\\\u016B\\\\u016D\\\\u016F\\\\u0171\\\\u0173\\\\u0175\\\\u0177\\\\u017A\\\\u017C\\\\u017E-\\\\u0180\\\\u0183\\\\u0185\\\\u0188\\\\u018C\\\\u018D\\\\u0192\\\\u0195\\\\u0199-\\\\u019B\\\\u019E\\\\u01A1\\\\u01A3\\\\u01A5\\\\u01A8\\\\u01AA\\\\u01AB\\\\u01AD\\\\u01B0\\\\u01B4\\\\u01B6\\\\u01B9\\\\u01BA\\\\u01BD-\\\\u01BF\\\\u01C6\\\\u01C9\\\\u01CC\\\\u01CE\\\\u01D0\\\\u01D2\\\\u01D4\\\\u01D6\\\\u01D8\\\\u01DA\\\\u01DC\\\\u01DD\\\\u01DF\\\\u01E1\\\\u01E3\\\\u01E5\\\\u01E7\\\\u01E9\\\\u01EB\\\\u01ED\\\\u01EF\\\\u01F0\\\\u01F3\\\\u01F5\\\\u01F9\\\\u01FB\\\\u01FD\\\\u01FF\\\\u0201\\\\u0203\\\\u0205\\\\u0207\\\\u0209\\\\u020B\\\\u020D\\\\u020F\\\\u0211\\\\u0213\\\\u0215\\\\u0217\\\\u0219\\\\u021B\\\\u021D\\\\u021F\\\\u0221\\\\u0223\\\\u0225\\\\u0227\\\\u0229\\\\u022B\\\\u022D\\\\u022F\\\\u0231\\\\u0233-\\\\u0239\\\\u023C\\\\u023F\\\\u0240\\\\u0242\\\\u0247\\\\u0249\\\\u024B\\\\u024D\\\\u024F';\r\n\r\n/**\r\n * A regular expression string that matches upper case letters: LATIN\r\n */\r\nexport const upperCaseLetter = '\\\\x41-\\\\x5a\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\\\\u0100\\\\u0102\\\\u0104\\\\u0106\\\\u0108\\\\u010a\\\\u010c\\\\u010e\\\\u0110\\\\u0112\\\\u0114\\\\u0116\\\\u0118\\\\u011a\\\\u011c\\\\u011e\\\\u0120\\\\u0122\\\\u0124\\\\u0126\\\\u0128\\\\u012a\\\\u012c\\\\u012e\\\\u0130\\\\u0132\\\\u0134\\\\u0136\\\\u0139\\\\u013b\\\\u013d\\\\u013f\\\\u0141\\\\u0143\\\\u0145\\\\u0147\\\\u014a\\\\u014c\\\\u014e\\\\u0150\\\\u0152\\\\u0154\\\\u0156\\\\u0158\\\\u015a\\\\u015c\\\\u015e\\\\u0160\\\\u0162\\\\u0164\\\\u0166\\\\u0168\\\\u016a\\\\u016c\\\\u016e\\\\u0170\\\\u0172\\\\u0174\\\\u0176\\\\u0178\\\\u0179\\\\u017b\\\\u017d\\\\u0181\\\\u0182\\\\u0184\\\\u0186\\\\u0187\\\\u0189-\\\\u018b\\\\u018e-\\\\u0191\\\\u0193\\\\u0194\\\\u0196-\\\\u0198\\\\u019c\\\\u019d\\\\u019f\\\\u01a0\\\\u01a2\\\\u01a4\\\\u01a6\\\\u01a7\\\\u01a9\\\\u01ac\\\\u01ae\\\\u01af\\\\u01b1-\\\\u01b3\\\\u01b5\\\\u01b7\\\\u01b8\\\\u01bc\\\\u01c4\\\\u01c5\\\\u01c7\\\\u01c8\\\\u01ca\\\\u01cb\\\\u01cd\\\\u01cf\\\\u01d1\\\\u01d3\\\\u01d5\\\\u01d7\\\\u01d9\\\\u01db\\\\u01de\\\\u01e0\\\\u01e2\\\\u01e4\\\\u01e6\\\\u01e8\\\\u01ea\\\\u01ec\\\\u01ee\\\\u01f1\\\\u01f2\\\\u01f4\\\\u01f6-\\\\u01f8\\\\u01fa\\\\u01fc\\\\u01fe\\\\u0200\\\\u0202\\\\u0204\\\\u0206\\\\u0208\\\\u020a\\\\u020c\\\\u020e\\\\u0210\\\\u0212\\\\u0214\\\\u0216\\\\u0218\\\\u021a\\\\u021c\\\\u021e\\\\u0220\\\\u0222\\\\u0224\\\\u0226\\\\u0228\\\\u022a\\\\u022c\\\\u022e\\\\u0230\\\\u0232\\\\u023a\\\\u023b\\\\u023d\\\\u023e\\\\u0241\\\\u0243-\\\\u0246\\\\u0248\\\\u024a\\\\u024c\\\\u024e';\r\n","import {digit, whitespace, highSurrogate, lowSurrogate, diacriticalMark, base, generalPunctuationBlock, nonCharacter, dingbatBlock, lowerCaseLetter, upperCaseLetter} from \"./const\"\r\n\r\n/**\r\n * Regular expression to match combining marks\r\n */\r\nexport const REGEXP_COMBINING_MARKS = new RegExp(\r\n    '([' +\r\n    base +\r\n    ']|[' +\r\n    highSurrogate +\r\n    '][' +\r\n    lowSurrogate +\r\n    ']|[' +\r\n    highSurrogate +\r\n    '](?![' +\r\n    lowSurrogate +\r\n    '])|(?:[^' +\r\n    highSurrogate +\r\n    ']|^)[' +\r\n    lowSurrogate +\r\n    '])([' +\r\n    diacriticalMark +\r\n    ']+)',\r\n    'g'\r\n);\r\n\r\n/**\r\n * Regular expression to match surrogate pairs\r\n */\r\nexport const REGEXP_SURROGATE_PAIRS = new RegExp('([' + highSurrogate + '])([' + lowSurrogate + '])', 'g');\r\n\r\n/**\r\n * Regular expression to match a unicode character\r\n */\r\nexport const REGEXP_UNICODE_CHARACTER = new RegExp(\r\n    '((?:[' +\r\n    base +\r\n    ']|[' +\r\n    highSurrogate +\r\n    '][' +\r\n    lowSurrogate +\r\n    ']|[' +\r\n    highSurrogate +\r\n    '](?![' +\r\n    lowSurrogate +\r\n    '])|(?:[^' +\r\n    highSurrogate +\r\n    ']|^)[' +\r\n    lowSurrogate +\r\n    '])(?:[' +\r\n    diacriticalMark +\r\n    ']+))|\\\r\n([' +\r\n    highSurrogate +\r\n    '][' +\r\n    lowSurrogate +\r\n    '])|\\\r\n([\\\\n\\\\r\\\\u2028\\\\u2029])|\\\r\n(.)',\r\n    'g'\r\n);\r\n\r\n/**\r\n * Regular expression to match whitespaces\r\n */\r\nexport const REGEXP_WHITESPACE = new RegExp('[' + whitespace + ']');\r\n\r\n/**\r\n * Regular expression to match whitespaces from the left side\r\n */\r\nexport const REGEXP_TRIM_LEFT = new RegExp('^[' + whitespace + ']+');\r\n\r\n/**\r\n * Regular expression to match whitespaces from the right side\r\n */\r\nexport const REGEXP_TRIM_RIGHT = new RegExp('[' + whitespace + ']+$');\r\n\r\n/**\r\n * Regular expression to match digit characters\r\n */\r\nexport const REGEXP_DIGIT = new RegExp('^' + digit + '+$');\r\n\r\n/**\r\n * Regular expression to match regular expression special characters\r\n */\r\nexport const REGEXP_SPECIAL_CHARACTERS = /[-[\\]{}()*+!<=:?./\\\\^$|#,]/g;\r\n\r\n/**\r\n * Regular expression to match not latin characters\r\n */\r\nexport const REGEXP_NON_LATIN = /[^A-Za-z0-9]/g;\r\n\r\n/**\r\n * Regular expression to match HTML special characters.\r\n */\r\nexport const REGEXP_HTML_SPECIAL_CHARACTERS = /[<>&\"'`]/g;\r\n\r\n/**\r\n * Regular expression to match sprintf format string\r\n */\r\nexport const REGEXP_CONVERSION_SPECIFICATION = /(%{1,2})(?:(\\d+)\\$)?(\\+)?([ 0]|'.{1})?(-)?(\\d+)?(?:\\.(\\d+))?([bcdiouxXeEfgGs])?/g;\r\n\r\n/**\r\n * Regular expression to match trailing zeros in a number\r\n */\r\nexport const REGEXP_TRAILING_ZEROS = /\\.?0+$/g;\r\n\r\n/**\r\n * Regular expression to match flags from a regular expression.\r\n */\r\nexport const REGEXP_FLAGS = /[gimuy]*$/;\r\n\r\n/**\r\n * Regular expression to match a list of tags.\r\n */\r\nexport const REGEXP_TAG_LIST = /<([A-Za-z0-9]+)>/g;\r\n\r\n/**\r\n * Regular expression to match Unicode words\r\n */\r\nexport const REGEXP_WORD = new RegExp(\r\n    '(?:[' +\r\n    upperCaseLetter +\r\n    '][' +\r\n    diacriticalMark +\r\n    ']*)?(?:[' +\r\n    lowerCaseLetter +\r\n    '][' +\r\n    diacriticalMark +\r\n    ']*)+|\\\r\n(?:[' +\r\n    upperCaseLetter +\r\n    '][' +\r\n    diacriticalMark +\r\n    ']*)+(?![' +\r\n    lowerCaseLetter +\r\n    '])|\\\r\n[' +\r\n    digit +\r\n    ']+|\\\r\n[' +\r\n    dingbatBlock +\r\n    ']|\\\r\n[^' +\r\n    nonCharacter +\r\n    generalPunctuationBlock +\r\n    whitespace +\r\n    ']+',\r\n    'g'\r\n);\r\n\r\n/**\r\n * Regular expression to match words from Basic Latin and Latin-1 Supplement blocks\r\n */\r\nexport const REGEXP_LATIN_WORD = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\r\n\r\n/**\r\n * Regular expression to match alpha characters\r\n */\r\nexport const REGEXP_ALPHA = new RegExp('^(?:[' + lowerCaseLetter + upperCaseLetter + '][' + diacriticalMark + ']*)+$');\r\n\r\n/**\r\n * Regular expression to match alpha and digit characters\r\n */\r\nexport const REGEXP_ALPHA_DIGIT = new RegExp(\r\n    '^((?:[' + lowerCaseLetter + upperCaseLetter + '][' + diacriticalMark + ']*)|[' + digit + '])+$'\r\n);\r\n\r\n/**\r\n * Regular expression to match Extended ASCII characters, i.e. the first 255\r\n */\r\nexport const REGEXP_EXTENDED_ASCII = /^[\\x01-\\xFF]*$/;","import {isNull} from \"./is_null\";\r\n\r\nexport function nvl(val, def){\r\n    return isNull(val) ? def : val;\r\n}","import {isNull} from \"../helpers/null/is_null\";\r\nimport {REGEXP_EXTENDED_ASCII, REGEXP_LATIN_WORD, REGEXP_WORD} from \"../helpers/regexp/regexp\";\r\nimport {nvl} from \"../helpers/null/nvl\";\r\n\r\nexport default function words(s, pattern, flags){\r\n    let regexp;\r\n\r\n    if (isNull(pattern)) {\r\n        regexp = REGEXP_EXTENDED_ASCII.test(s) ? REGEXP_LATIN_WORD : REGEXP_WORD;\r\n    } else if (pattern instanceof RegExp) {\r\n        regexp = pattern;\r\n    } else {\r\n        regexp = new RegExp(pattern, nvl(flags, ''))\r\n    }\r\n\r\n    return nvl(s.match(regexp), []);\r\n}\r\n","export default function capitalize(s){\r\n    return (\"\"+s).substr(0, 1).toUpperCase() + (\"\"+s).substr(1).toLowerCase()\r\n}\r\n","export default function lower(s){\r\n    return s.toLowerCase()\r\n}\r\n","export default function chars(s, ignore = []){\r\n    return (\"\"+s).split(\"\").filter( (el) => !ignore.includes(el) );\r\n}\r\n","const _swap = function(swapped, char){\r\n    const lc = char.toLowerCase()\r\n    const uc = char.toUpperCase()\r\n\r\n    return swapped + (char === lc ? uc : lc)\r\n}\r\n\r\nexport default function swap(s){\r\n    return s.split(\"\").reduce(_swap, '')\r\n}\r\n","import {isNull} from \"../null/is_null\";\r\n\r\nexport default function toStr(val, def = \"\"){\r\n    if (isNull(val)) return def;\r\n    if (typeof val === \"string\") return val;\r\n    if (Array.isArray(val)) return val.join(\"\");\r\n    return JSON.stringify(val);\r\n}","export default function unique(a){\r\n    let _a = [...a];\r\n    for (let i = 0; i < _a.length; ++i) {\r\n        for (let j = i + 1; j < _a.length; ++j) {\r\n            if (_a[i] === _a[j])\r\n                _a.splice(j--, 1);\r\n        }\r\n    }\r\n\r\n    return _a;\r\n}","import camelCase from \"./effects/camel\";\r\nimport capitalize from \"./effects/capitalize\";\r\nimport dashedName from \"./effects/dashedname\";\r\nimport decapitalize from \"./effects/decapitalize\";\r\nimport kebab from \"./effects/kebab\";\r\nimport lower from \"./effects/lower\";\r\nimport reverse from \"./effects/reverse\";\r\nimport shuffle from \"./effects/shuffle\";\r\nimport snake from \"./effects/snake\";\r\nimport swap from \"./effects/swap\";\r\nimport title from \"./effects/title\";\r\nimport upper from \"./effects/upper\";\r\nimport {wrap, wrapTag} from \"./effects/wrap\";\r\nimport words from \"./split/words\";\r\nimport chars from \"./split/chars\";\r\nimport count from \"./count/count\";\r\nimport {countChars, countUniqueChars} from \"./count/count_chars\";\r\nimport countSubstr from \"./count/count_substrings\";\r\nimport {countWords, countUniqueWords} from \"./count/count_words\";\r\n\r\nexport default {\r\n    camelCase,\r\n    capitalize,\r\n    chars,\r\n    count,\r\n    countChars,\r\n    countUniqueChars,\r\n    countSubstr,\r\n    countWords,\r\n    countUniqueWords,\r\n    dashedName,\r\n    decapitalize,\r\n    kebab,\r\n    lower,\r\n    reverse,\r\n    shuffle,\r\n    snake,\r\n    swap,\r\n    title,\r\n    upper,\r\n    words,\r\n    wrap,\r\n    wrapTag\r\n}\r\n\r\n","import words from \"../split/words\";\r\nimport capitalize from \"./capitalize\";\r\n\r\nexport default function camelCase(s){\r\n    return words(\"\"+s).map( (el, i) => {\r\n        return i === 0 ? el.toLowerCase() : capitalize(el).toString()\r\n    } ).join(\"\")\r\n}\r\n","import toStr from \"../helpers/string/to_string\";\r\n\r\nexport default function count(s){\r\n    return toStr(s).length;\r\n}","import chars from \"../split/chars\";\r\nimport unique from \"../helpers/array/unique\";\r\n\r\nexport function countChars(s, ignore){\r\n    return chars(s, ignore).length;\r\n}\r\n\r\nexport function countUniqueChars(s, ignore){\r\n    return unique(chars(s, ignore)).length;\r\n}\r\n","import toStr from \"../helpers/string/to_string\";\r\n\r\nexport default function countSubstr(s, sub){\r\n    let _s = toStr(s)\r\n    let _sub = toStr(sub)\r\n    return _s === '' || _sub === '' ? 0 : _s.split(_sub).length - 1;\r\n}","import words from \"../split/words\";\r\nimport unique from \"../helpers/array/unique\";\r\n\r\nexport function countWords(s, pattern, flags){\r\n    return words(s, pattern, flags).length;\r\n}\r\n\r\nexport function countUniqueWords(s, pattern, flags){\r\n    return unique(words(s, pattern, flags)).length;\r\n}","import words from \"../split/words\";\r\n\r\nexport default function dashedName(s){\r\n    return words(\"\"+s).map( (el) => el.toLowerCase() ).join(\"-\")\r\n}\r\n","export default function decapitalize(s){\r\n    return (\"\"+s).substr(0, 1).toLowerCase() + (\"\"+s).substr(1)\r\n}\r\n","import words from \"../split/words\";\r\n\r\nexport default function kebab(s){\r\n    return words(s).map( el => el.toLowerCase() ).join(\"-\")\r\n}\r\n","import chars from \"../split/chars\";\r\n\r\nexport default function reverse(s){\r\n    return chars(s).reverse().join(\"\");\r\n}\r\n\r\n","export default function shuffle(s){\r\n    let a = s.split(\"\")\r\n    let i = s.length, t, r\r\n\r\n    while (0 !== i) {\r\n        r = Math.floor(Math.random() * i)\r\n        i -= 1\r\n        t = a[i]\r\n        a[i] = a[r]\r\n        a[r] = t\r\n    }\r\n\r\n    return a.join(\"\")\r\n}\r\n","import words from \"../split/words\";\r\n\r\nexport default function snake(s){\r\n    return words(s).map( el => el.toLowerCase() ).join(\"_\")\r\n}\r\n","import {REGEXP_EXTENDED_ASCII, REGEXP_LATIN_WORD, REGEXP_WORD} from \"../helpers/regexp/regexp\";\r\nimport {isNull} from \"../helpers/null/is_null\";\r\nimport capitalize from \"./capitalize\";\r\nimport lower from \"./lower\";\r\n\r\nexport default function title(s, noSplit){\r\n    const regexp = REGEXP_EXTENDED_ASCII.test(s) ? REGEXP_LATIN_WORD : REGEXP_WORD;\r\n    const noSplitArray = Array.isArray(noSplit) ? noSplit : isNull(noSplit) ?  [] : noSplit.split();\r\n\r\n    return s.replace(regexp, (w, i) => {\r\n        const isNoSplit = i && noSplitArray.includes(s[i - 1]);\r\n        return isNoSplit ? lower(w) : capitalize(w);\r\n    })\r\n}\r\n","export default function upper(s){\r\n    return (\"\"+s).toUpperCase();\r\n}\r\n","function wrapTag(s, tag = \"div\"){\r\n    return `<${tag}>${s}</${tag}>`\r\n}\r\n\r\nfunction wrap(s, before = \"\", after = \"\"){\r\n    return  before + s + after\r\n}\r\n\r\nexport {\r\n    wrap,\r\n    wrapTag\r\n}\r\n","import f from \"./functions\";\r\n\r\nclass Cake {\r\n    _value;\r\n\r\n    constructor(s = \"\") {\r\n        this._value = \"\"+s\r\n    }\r\n\r\n    [Symbol.toPrimitive](hint){\r\n        if (hint === \"number\") {\r\n            return +this.value\r\n        }\r\n\r\n        return this.value\r\n    }\r\n\r\n    get [Symbol.toStringTag](){return \"Cake\"}\r\n\r\n    get value(){return this._value}\r\n    set value(s){this._value = s}\r\n\r\n    get length(){return this._value.length}\r\n\r\n    toString(){return this.value}\r\n\r\n    camelCase(){\r\n        this.value = f.camelCase(this.value)\r\n        return this\r\n    }\r\n\r\n    capitalize(){\r\n        this.value = f.capitalize(this.value)\r\n        return this\r\n    }\r\n\r\n    chars(){\r\n        return f.chars(this.value)\r\n    }\r\n\r\n    count(){\r\n        return f.count(this.value)\r\n    }\r\n\r\n    countChars(ignore){\r\n        return f.countChars(this.value, ignore)\r\n    }\r\n\r\n    countUniqueChars(ignore){\r\n        return f.countUniqueChars(this.value, ignore)\r\n    }\r\n\r\n    countSubstr(sub){\r\n        return f.countSubstr(this.value, sub)\r\n    }\r\n\r\n    countWords(pattern, flags){\r\n        return f.countWords(this.value, pattern, flags)\r\n    }\r\n\r\n    countUniqueWords(pattern, flags){\r\n        return f.countUniqueWords(this.value, pattern, flags)\r\n    }\r\n\r\n    dashedName(){\r\n        this.value = f.dashedName(this.value)\r\n        return this\r\n    }\r\n\r\n    decapitalize(){\r\n        this.value = f.decapitalize(this.value)\r\n        return this\r\n    }\r\n\r\n    kebab(){\r\n        this.value = f.kebab(this.value)\r\n        return this\r\n    }\r\n\r\n    lower(){\r\n        this.value = f.lower(this.value)\r\n        return this\r\n    }\r\n\r\n    reverse(){\r\n        this.value = f.reverse(this.value);\r\n        return this\r\n    }\r\n\r\n    shuffle(){\r\n        this.value = f.shuffle(this.value)\r\n        return this\r\n    }\r\n\r\n    snake(){\r\n        this.value = f.snake(this.value)\r\n        return this\r\n    }\r\n\r\n    swap(){\r\n        this.value = f.swap(this.value)\r\n        return this\r\n    }\r\n\r\n    title(){\r\n        this.value = f.title(this.value)\r\n        return this\r\n    }\r\n\r\n    upper(){\r\n        this.value = f.upper(this.value)\r\n        return this\r\n    }\r\n\r\n    words(pattern, flags){\r\n        return f.words(this.value, pattern, flags)\r\n    }\r\n\r\n    wrap(a, b){\r\n        this.value = f.wrap(this.value, a, b)\r\n        return this\r\n    }\r\n\r\n    wrapTag(t){\r\n        this.value = f.wrapTag(this.value, t)\r\n        return this\r\n    }\r\n}\r\n\r\nconst cake = function(s){\r\n    return new Cake(s)\r\n}\r\n\r\nexport default Cake;\r\nexport {\r\n    cake\r\n}","import functions from \"./functions\";\r\nimport Cake, {cake} from \"./type\";\r\n\r\nObject.assign(Cake, functions);\r\n\r\nexport default Cake;\r\nexport {\r\n    cake\r\n}\r\n"],"names":["isNull","val","diacriticalMark","lowerCaseLetter","upperCaseLetter","REGEXP_WORD","RegExp","REGEXP_LATIN_WORD","REGEXP_EXTENDED_ASCII","nvl","def","words","s","pattern","flags","regexp","test","match","capitalize","substr","toUpperCase","toLowerCase","lower","chars","ignore","split","filter","el","includes","_swap","swapped","char","lc","uc","toStr","Array","isArray","join","JSON","stringify","unique","a","_a","i","length","j","splice","camelCase","map","toString","count","countChars","countUniqueChars","countSubstr","sub","_s","_sub","countWords","countUniqueWords","dashedName","decapitalize","kebab","reverse","shuffle","t","r","Math","floor","random","snake","swap","reduce","title","noSplit","noSplitArray","replace","w","upper","wrap","wrapTag","tag","Symbol","toPrimitive","toStringTag","Cake","_value","hint","this","value","f","b","Object","assign","functions"],"mappings":"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"}